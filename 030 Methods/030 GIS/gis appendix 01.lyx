#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage{microtype}
\usepackage{booktabs}
\usepackage{graphicx}
\usepackage[bf,hang,small]{caption}
%\usepackage[sf,bf,raggedright]{titlesec}
\definecolor{LinkColor}{rgb}{0,0,0.4}
\end_preamble
\use_default_options false
\master ../../000 master 01.lyx
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman palatino
\font_sans helvet
\font_typewriter beramono
\font_default_family default
\use_non_tex_fonts false
\font_sc true
\font_osf false
\font_sf_scale 100
\font_tt_scale 85

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing other 1.1499999999999999
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 10
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=LinkColor,anchorcolor=LinkColor,citecolor=LinkColor,filecolor=LinkColor,menucolor=LinkColor,urlcolor=LinkColor"
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_authoryear
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\branch Long appendices
\selected 1
\filename_suffix 0
\color #ffffff
\end_branch
\branch Not in master doc
\selected 1
\filename_suffix 0
\color #ffffff
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2cm
\rightmargin 2.5cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle plain
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Supplementary information for analytical methods
\begin_inset CommandInset label
LatexCommand label
name "chap:analysis-appendix"

\end_inset


\end_layout

\begin_layout Section
Daylight calculations
\begin_inset CommandInset label
LatexCommand label
name "sec:daylight-plr"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true,language=SQL,numbers=left,numberstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

-- in R: install.packages('StreamMetabolism', dependencies = TRUE)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create or replace function _r_daylight_period(lat double precision, lon
 double precision, datestring text, timezone text default 'UTC') 
\end_layout

\begin_layout Plain Layout

returns setof double precision as $$
\end_layout

\begin_layout Plain Layout

  library('StreamMetabolism')
\end_layout

\begin_layout Plain Layout

  df <- sunrise.set(lat, lon, datestring, timezone)
\end_layout

\begin_layout Plain Layout

  ss <- c(df$sunrise, df$sunset)
\end_layout

\begin_layout Plain Layout

  return(ss)
\end_layout

\begin_layout Plain Layout

$$ language plr immutable strict;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create or replace function is_daylight(location geometry, moment timestamp
 without time zone, timezone text) 
\end_layout

\begin_layout Plain Layout

returns boolean as $$
\end_layout

\begin_layout Plain Layout

  select
\end_layout

\begin_layout Plain Layout

    $2 at time zone $3 
\end_layout

\begin_layout Plain Layout

      > timestamp with time zone '1970-01-01 00:00:00-00' + cast(min(dp)
 || ' seconds' as interval)
\end_layout

\begin_layout Plain Layout

    and $2 at time zone $3 
\end_layout

\begin_layout Plain Layout

      < timestamp with time zone '1970-01-01 00:00:00-00' + cast(max(dp)
 || ' seconds' as interval)
\end_layout

\begin_layout Plain Layout

  from 
\end_layout

\begin_layout Plain Layout

    _r_daylight_period(
\end_layout

\begin_layout Plain Layout

      st_y(st_transform($1, 4326)), -- 4326 -> WGS84 projection, as required
\end_layout

\begin_layout Plain Layout

      st_x(st_transform($1, 4326)), 
\end_layout

\begin_layout Plain Layout

      to_char($2, 'YYYY/MM/DD'),
\end_layout

\begin_layout Plain Layout

      $3
\end_layout

\begin_layout Plain Layout

    ) dp;
\end_layout

\begin_layout Plain Layout

$$ language sql immutable strict;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create table esm_daylight as ( -- assumes UK time zone, so valid for UK
 responses only
\end_layout

\begin_layout Plain Layout

  select 
\end_layout

\begin_layout Plain Layout

    id as esm_id, 
\end_layout

\begin_layout Plain Layout

    case when is_daylight(location, _start, 'Europe/London') then 1 else
 0 end as is_daylight
\end_layout

\begin_layout Plain Layout

  from esm_answer_sets
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Section
Kernel-weighted proportion approximation functions
\begin_inset CommandInset label
LatexCommand label
name "sec:kernel-funcs"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize\ttfamily},breaklines=true,language=SQL,numbers=left,numberstyle={\tiny},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

-- kernel functions
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create or replace function uniform_pdf
\end_layout

\begin_layout Plain Layout

( double precision              -- $1 = x
\end_layout

\begin_layout Plain Layout

, double precision default 1.0  -- $2 = bandwidth
\end_layout

\begin_layout Plain Layout

, double precision default 0.0  -- $3 = centre
\end_layout

\begin_layout Plain Layout

) returns double precision as $$
\end_layout

\begin_layout Plain Layout

  select
\end_layout

\begin_layout Plain Layout

    case
\end_layout

\begin_layout Plain Layout

      when $1 > $3 - $2 and $1 < $3 + $2 then (
\end_layout

\begin_layout Plain Layout

        select cast(0.5 as double precision)
\end_layout

\begin_layout Plain Layout

      )
\end_layout

\begin_layout Plain Layout

      else 0
\end_layout

\begin_layout Plain Layout

    end;
\end_layout

\begin_layout Plain Layout

$$ language sql immutable;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create or replace function triangular_pdf
\end_layout

\begin_layout Plain Layout

( double precision              -- $1 = x
\end_layout

\begin_layout Plain Layout

, double precision default 1.0  -- $2 = bandwidth
\end_layout

\begin_layout Plain Layout

, double precision default 0.0  -- $3 = centre
\end_layout

\begin_layout Plain Layout

) returns double precision as $$
\end_layout

\begin_layout Plain Layout

  select
\end_layout

\begin_layout Plain Layout

    case
\end_layout

\begin_layout Plain Layout

      when $1 > $3 - $2 and $1 < $3 + $2 then (
\end_layout

\begin_layout Plain Layout

        select 1 - abs(($1 - $3) / $2)
\end_layout

\begin_layout Plain Layout

      )
\end_layout

\begin_layout Plain Layout

      else 0
\end_layout

\begin_layout Plain Layout

    end;
\end_layout

\begin_layout Plain Layout

$$ language sql immutable;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create or replace function normal_pdf
\end_layout

\begin_layout Plain Layout

( double precision              -- $1 = x
\end_layout

\begin_layout Plain Layout

, double precision default 1.0  -- $2 = std dev (bandwidth)
\end_layout

\begin_layout Plain Layout

, double precision default 0.0  -- $3 = mean (centre)
\end_layout

\begin_layout Plain Layout

) returns double precision as $$
\end_layout

\begin_layout Plain Layout

  select (1.0 / (sqrt(2.0 * pi() * pow($2, 2)))) 
\end_layout

\begin_layout Plain Layout

       * exp(-pow($1 - $3, 2) / (2.0 * pow($2, 2)));
\end_layout

\begin_layout Plain Layout

$$ language sql immutable;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create or replace function epanechnikov_pdf
\end_layout

\begin_layout Plain Layout

( double precision              -- $1 = x
\end_layout

\begin_layout Plain Layout

, double precision default 1.0  -- $2 = bandwidth
\end_layout

\begin_layout Plain Layout

, double precision default 0.0  -- $3 = centre
\end_layout

\begin_layout Plain Layout

) returns double precision as $$
\end_layout

\begin_layout Plain Layout

  select
\end_layout

\begin_layout Plain Layout

    case
\end_layout

\begin_layout Plain Layout

      when $1 > $3 - $2 and $1 < $3 + $2 then (
\end_layout

\begin_layout Plain Layout

        select 0.75 * (1 - pow(($1 - $3) / $2, 2))
\end_layout

\begin_layout Plain Layout

      )
\end_layout

\begin_layout Plain Layout

      else 0
\end_layout

\begin_layout Plain Layout

    end;
\end_layout

\begin_layout Plain Layout

$$ language sql immutable;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

-- current kernel function 
\end_layout

\begin_layout Plain Layout

-- (uncomment the kernel you want to use, and redefine: the normal is shown
 here)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create or replace function __current_kernel_pdf
\end_layout

\begin_layout Plain Layout

( double precision              -- $1 = x
\end_layout

\begin_layout Plain Layout

, double precision default 1.0  -- $2 = std dev/bandwidth
\end_layout

\begin_layout Plain Layout

, double precision default 0.0  -- $3 = mean/centre
\end_layout

\begin_layout Plain Layout

) returns double precision as $$
\end_layout

\begin_layout Plain Layout

  select
\end_layout

\begin_layout Plain Layout

    normal_pdf
\end_layout

\begin_layout Plain Layout

    -- epanechnikov_pdf
\end_layout

\begin_layout Plain Layout

    -- triangular_pdf
\end_layout

\begin_layout Plain Layout

    -- uniform_pdf
\end_layout

\begin_layout Plain Layout

    ($1, $2, $3);
\end_layout

\begin_layout Plain Layout

$$ language sql immutable;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

-- support functions
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create or replace function __slice_height
\end_layout

\begin_layout Plain Layout

( double precision  -- $1 = kernel std dev
\end_layout

\begin_layout Plain Layout

, double precision  -- $2 = kernel radius at top of slice
\end_layout

\begin_layout Plain Layout

, double precision  -- $3 = kernel radius at bottom of slice
\end_layout

\begin_layout Plain Layout

) returns double precision as $$
\end_layout

\begin_layout Plain Layout

  select __current_kernel_pdf($2, $1) - __current_kernel_pdf($3, $1);
\end_layout

\begin_layout Plain Layout

$$ language sql immutable;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create or replace function __slice_radius
\end_layout

\begin_layout Plain Layout

( double precision  -- $1 = kernel radius at top of slice
\end_layout

\begin_layout Plain Layout

, double precision  -- $2 = kernel radius at bottom of slice
\end_layout

\begin_layout Plain Layout

) returns double precision as $$
\end_layout

\begin_layout Plain Layout

  select $1 + (($2 - $1) / 2);
\end_layout

\begin_layout Plain Layout

$$ language sql immutable;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create or replace function __kernel_slice_volume
\end_layout

\begin_layout Plain Layout

( double precision  -- $1 = kernel std dev
\end_layout

\begin_layout Plain Layout

, double precision  -- $2 = kernel radius at top of slice
\end_layout

\begin_layout Plain Layout

, double precision  -- $3 = kernel radius at bottom of slice
\end_layout

\begin_layout Plain Layout

, int               -- $4 = buffer precision
\end_layout

\begin_layout Plain Layout

) returns double precision as $$
\end_layout

\begin_layout Plain Layout

  select
\end_layout

\begin_layout Plain Layout

    coalesce(
\end_layout

\begin_layout Plain Layout

      st_area(
\end_layout

\begin_layout Plain Layout

        st_buffer(
\end_layout

\begin_layout Plain Layout

          st_makepoint(0, 0),
\end_layout

\begin_layout Plain Layout

          __slice_radius($2, $3),
\end_layout

\begin_layout Plain Layout

          $4
\end_layout

\begin_layout Plain Layout

        )
\end_layout

\begin_layout Plain Layout

      ),
\end_layout

\begin_layout Plain Layout

      0
\end_layout

\begin_layout Plain Layout

    )
\end_layout

\begin_layout Plain Layout

    * __slice_height($1, $2, $3);
\end_layout

\begin_layout Plain Layout

$$ language sql immutable;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create or replace function __intersected_slice_volume
\end_layout

\begin_layout Plain Layout

( geometry          -- $1 = area geometry
\end_layout

\begin_layout Plain Layout

, geometry          -- $2 = kernel centre point geometry
\end_layout

\begin_layout Plain Layout

, double precision  -- $3 = kernel std dev
\end_layout

\begin_layout Plain Layout

, double precision  -- $4 = kernel radius at top of slice
\end_layout

\begin_layout Plain Layout

, double precision  -- $5 = kernel radius at bottom of slice
\end_layout

\begin_layout Plain Layout

, int               -- $6 = buffer precision
\end_layout

\begin_layout Plain Layout

) returns double precision as $$
\end_layout

\begin_layout Plain Layout

  select
\end_layout

\begin_layout Plain Layout

    coalesce(
\end_layout

\begin_layout Plain Layout

      st_area(
\end_layout

\begin_layout Plain Layout

        st_intersection(
\end_layout

\begin_layout Plain Layout

          $1,
\end_layout

\begin_layout Plain Layout

          st_buffer(
\end_layout

\begin_layout Plain Layout

            $2,
\end_layout

\begin_layout Plain Layout

            __slice_radius($4, $5),
\end_layout

\begin_layout Plain Layout

            $6
\end_layout

\begin_layout Plain Layout

          )
\end_layout

\begin_layout Plain Layout

        )
\end_layout

\begin_layout Plain Layout

      ),
\end_layout

\begin_layout Plain Layout

      0
\end_layout

\begin_layout Plain Layout

    )
\end_layout

\begin_layout Plain Layout

    * __slice_height($3, $4, $5);
\end_layout

\begin_layout Plain Layout

$$ language sql immutable;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

-- main function
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

create or replace function kernel_weighted_local_proportion
\end_layout

\begin_layout Plain Layout

( geometry          -- $1 = area geometry
\end_layout

\begin_layout Plain Layout

, geometry          -- $2 = kernel centre point geometry
\end_layout

\begin_layout Plain Layout

, double precision  -- $3 = kernel std dev
\end_layout

\begin_layout Plain Layout

, double precision  -- $4 = truncation bandwidth (for normal only -- for
 others, repeat $3)
\end_layout

\begin_layout Plain Layout

, int               -- $5 = number of slices for approximation
\end_layout

\begin_layout Plain Layout

, int               -- $6 = buffer precision (points per 1/4 circle)
\end_layout

\begin_layout Plain Layout

) returns double precision as $$
\end_layout

\begin_layout Plain Layout

  select
\end_layout

\begin_layout Plain Layout

    sum(__intersected_slice_volume(
\end_layout

\begin_layout Plain Layout

      $1, $2, $3,
\end_layout

\begin_layout Plain Layout

      $4 * (cast(s as double precision) / $5),     -- kernel radius at top
 of slice
\end_layout

\begin_layout Plain Layout

      $4 * (cast(s + 1 as double precision) / $5), -- kernel radius at bottom
 of slice
\end_layout

\begin_layout Plain Layout

      $6
\end_layout

\begin_layout Plain Layout

    ))
\end_layout

\begin_layout Plain Layout

    /
\end_layout

\begin_layout Plain Layout

    sum(__kernel_slice_volume(
\end_layout

\begin_layout Plain Layout

      $3,
\end_layout

\begin_layout Plain Layout

      $4 * (cast(s as double precision) / $5),     -- kernel radius at top
 of slice
\end_layout

\begin_layout Plain Layout

      $4 * (cast(s + 1 as double precision) / $5), -- kernel radius at bottom
 of slice
\end_layout

\begin_layout Plain Layout

      $6
\end_layout

\begin_layout Plain Layout

    ))
\end_layout

\begin_layout Plain Layout

  from generate_series(0, $5 - 1) s;
\end_layout

\begin_layout Plain Layout

$$ language sql immutable;
\end_layout

\end_inset


\end_layout

\end_body
\end_document
